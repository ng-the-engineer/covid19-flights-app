{"version":3,"sources":["components/Header.js","components/HowItWorks.js","actions/index.js","components/FlightsFilter/FlightsFilter.js","components/FlightsFilter/CasesList.js","App.js","serviceWorker.js","reducers/flights.js","reducers/index.js","store.js","index.js","logo.svg"],"names":["connect","props","class","fontSize","color","casesResult","cases","console","log","type","onSubmit","event","preventDefault","airline","target","value","flightNumber","dispatch","fetch","method","headers","then","response","json","catch","err","filterByAirlineFlightNo","name","placeholder","state","flights","data","NoDataIndication","keyField","columns","dataField","text","striped","hover","condensed","noDataIndication","App","className","Helmet","charSet","content","Boolean","window","location","hostname","match","initState","reducers","action","records","reducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.b11905be.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\n\nconst Header = (props) => (\n  <header class=\"header\">\n    <div class=\"hero-text-box\">\n      <span class=\"hero-title\">Fly safely with CovidClean</span>\n      <span class=\"hero-version\">beta</span>\n    </div>\n  </header>\n)\n\nexport default connect()(Header)","import React from 'react';\nimport { connect } from 'react-redux';\nimport IosPaperPlaneOutline from 'react-ionicons/lib/IosPaperPlaneOutline'\nimport IosSearchOutline from 'react-ionicons/lib/IosSearchOutline'\nimport MdHeart from 'react-ionicons/lib/MdHeart'\n\nconst HowItWorks = (props) => (\n  <section class=\"section-how\">\n    <div class=\"row\">\n      <h2>How it works</h2>\n    </div>\n    <div class=\"row\">\n      <div class=\"long-paragraph\">\n      Traveling is not only a challenge in an unprecedented period but also a risk. The borders restriction is getting loosen while the enormous efforts by the whole world have paid off. Yet it does not mean that we can fly like what we did before the pandemic. You strike your best to protect you and your beloved's health. Likewise, CovidClean works our best effort to provide you additional protection for your trip. CovidClean allows users to search for coronavirus cases associated with a particular flight by aggregating the data point connecting to flight information. Fly with CovidClean's information on your fingertip.\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"invisible-padding\">\n      </div>\n      <div class=\"span-1-of-3 box\">\n        <div>\n          <IosPaperPlaneOutline fontSize=\"60px\" color=\"#43853d\" />\n          <h3>Before check-in</h3>\n          <p>\n          We know your concern about traveling at this moment. Our insight is never too late until your flight check-in. Mitigate the risk by checking our aggregated covid19 database with ease. Input the airline code and flight number. We will tell you the associated Covid19 cases with this cabin.\n          </p>\n        </div>\n      </div>\n      <div class=\"span-1-of-3 box\">\n        <div>\n          <IosSearchOutline fontSize=\"60px\" color=\"#43853d\" />\n          <h3>Search your flight</h3>\n          <p>\n          Our information is based on the Open Data by the government. If no result is displayed, it indicates there is no case related to this flight number according to the particular government. Unfortunately, if there are cases found, we hope you make your plan with the best available option.  Our database supports the Hong Kong region with the latest seven days cases in the beta version.\n          </p>\n        </div>\n      </div>\n      <div class=\"span-1-of-3 box\">\n        <div>\n          <MdHeart fontSize=\"60px\" color=\"#43853d\" />\n          <h3>Safe flight</h3>\n          <p>\n          Make a wise choice and have a safe flight. CovidClean provides data for informational purposes. The traveling policies of the airlines and immigration are subjected to change due to the pandemic's progress. Please always check with your airlines, immigration, and airports for the latest policies.\n          </p>\n        </div>\n      </div>\n    </div>\n  </section>\n)\n\nexport default connect()(HowItWorks)","const FLIGHT_FILTER = 'FLIGHT_FILTER'\n\nexport const filterByAirlineFlightNo = (airline, flightNumber) => {\n  return dispatch => {\n    fetch(`https://covid19-flights.herokuapp.com/api/flights?airline=${airline}&flightNumber=${flightNumber}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n    .then(response => response.json())\n    .then(json => dispatch(casesResult(json)))\n    // .then(json => (console.log(json)))\n    .catch(err => console.log(err))\n  }\n}\n\nconst CASES_RESULT = 'CASES_RESULT'\n\nexport const casesResult = (cases) => {\n  console.log('cases:', cases)\n  return {\n  type: CASES_RESULT,\n  cases\n}}","import React from 'react';\nimport { connect } from 'react-redux';\nimport { filterByAirlineFlightNo } from '../../actions';\nimport IosSearchOutline from 'react-ionicons/lib/IosSearchOutline'\n\nconst FlightsFilter = (props) => (\n  <div class=\"flight-filter-section\">\n    <form class=\"flight-filter-box\" onSubmit={(event) => {\n      event.preventDefault()\n      let airline = event.target.airline.value\n      let flightNumber = event.target.flightNumber.value\n      props.dispatch(filterByAirlineFlightNo(airline, flightNumber))\n    }}>\n      <div class=\"search-box\">\n        <label class=\"input-label\">Airline</label><br/>\n        <input type=\"text\" class=\"input-box\" name=\"airline\" placeholder=\"e.g. CX\"/>\n      </div>\n      <div class=\"search-box\">\n        <label class=\"input-label\">Flight Number</label><br/>\n        <input type=\"text\" name=\"flightNumber\" placeholder=\"e.g. 520\"/><br/>\n      </div>\n      <div class=\"search-box\">\n        <label></label><br/>\n        <button><IosSearchOutline fontSize=\"50px\" color=\"#fff\" /></button>\n      </div>\n    </form>\n  </div>\n)\n\nexport default connect()(FlightsFilter)\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport BootstrapTable from 'react-bootstrap-table-next';\n\nconst CasesList = (props) => {\n  console.log('props:', props)\n\n  const products = [ {\n    id: '0003',\n    name: 'Johnson',\n    price: '576'\n  },{\n    id: '006',\n    name: 'Prince',\n    price: '7890'\n  } ];\n\n  const columns = [{\n    dataField: 'airline',\n    text: 'Airline'\n  }, {\n    dataField: 'flight_number',\n    text: 'Flight Number'\n  }, {\n    dataField: 'origin',\n    text: 'Origin'\n  }, {\n    dataField: 'destination',\n    text: 'Destination'\n  }, {\n    dataField: 'arrival_date',\n    text: 'Arrival Date'\n  }, {\n    dataField: 'seat_number',\n    text: 'Seat Number'\n  }, {\n    dataField: 'case_number',\n    text: 'Case Number'\n  }];\n\n  const NoDataIndication = () => (\n    <div>\n      No case is associated to this flight number\n    </div>\n  );\n\n  return (\n    <div class=\"search-result-table\">\n      <BootstrapTable keyField='id' data={ props.cases } columns={ columns } \n      striped\n      hover\n      condensed\n  noDataIndication={ () => <NoDataIndication /> } />\n  </div>\n)}\n\nconst mapStateToProps = (state) => ({\n  cases: state.flights.data\n})\n\nexport default connect(mapStateToProps)(CasesList)","import React from 'react';\nimport { Helmet } from \"react-helmet\";\nimport logo from './logo.svg';\nimport './css/App.css';\nimport './css/grid.css';\nimport './css/queries.css';\n\nimport Header from './components/Header';\nimport HowItWorks from './components/HowItWorks';\nimport FlightsFilter from './components/FlightsFilter/FlightsFilter';\nimport CasesList from './components/FlightsFilter/CasesList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>CovidClean</title>\n        <meta name=\"description\" content=\"React application\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n      </Helmet>\n      <Header/>\n      <HowItWorks/>\n      <FlightsFilter/>\n      <CasesList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\n  data: []\n}\n\nconst reducers = (state = initState, action) => {\n  console.log('action:', action)\n  switch(action.type) {\n    case 'CASES_RESULT':\n      return {\n        ...state,\n        data: action.cases.records\n      }\n    \n    case 'FLIGHT_FILTER':\n      // fetch api and return data\n      return {\n        ...state,\n        data: [\n          ...state.data, {\n            airline: action.airline,\n            flightNumber: action.flightNumber\n          }\n        ] \n      }\n    default:\n      return state\n  }\n}\n\nexport default reducers","import { combineReducers } from 'redux'\nimport flights from './flights'\n\nconst reducer = combineReducers({\n  flights\n})\n\nexport default reducer","import { createStore, applyMiddleware } from 'redux'\nimport reducers from './reducers'\nimport thunk from 'redux-thunk'\n\n// const store = createStore(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(), applyMiddleware(thunk))\n\nconst store = createStore(reducers, applyMiddleware(thunk))\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}